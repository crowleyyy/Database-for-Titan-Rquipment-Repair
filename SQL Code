-- Create ErrorLog table for logging errors
CREATE TABLE IF NOT EXISTS ErrorLog (
  LogID INT PRIMARY KEY AUTO_INCREMENT,
  Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ErrorMessage VARCHAR(255),
  ProcedureName VARCHAR(255)
);

-- Create Equipment table with version number for concurrency control
CREATE TABLE IF NOT EXISTS Equipment (
  SerialNumber INT PRIMARY KEY,
  LastServiceDate DATE,
  LastServiceDone VARCHAR(255),
  NextPNMDate DATE,
  NeedsParts ENUM('true', 'false', 'part ordered'),
  PartName VARCHAR(255) DEFAULT NULL,
  PartsArrived ENUM('true', 'false', 'N/A'),
  LocationID INT,
  Version INT DEFAULT 0, -- Added version column
  FOREIGN KEY (LocationID) REFERENCES Location(ID),
  INDEX idx_SerialNumber (SerialNumber),
  INDEX idx_LocationID (LocationID),
  INDEX idx_LastServiceDate (LastServiceDate), -- Index for optimization
  -- Constraints
  CONSTRAINT ck_LastServiceDone CHECK ((LastServiceDate IS NULL AND LastServiceDone IS NULL) OR (LastServiceDate IS NOT NULL AND LastServiceDone IS NOT NULL)),
  CONSTRAINT ck_NextPNMDate CHECK (NextPNMDate >= CURDATE())
);

-- Create Location table
CREATE TABLE IF NOT EXISTS Location (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  Name VARCHAR(255),
  Address VARCHAR(255),
  PhoneNumber VARCHAR(20),
  INDEX idx_Name (Name)
);

-- Create ServiceHistory table
CREATE TABLE IF NOT EXISTS ServiceHistory (
  ServiceID INT PRIMARY KEY AUTO_INCREMENT,
  EquipmentSerialNumber INT,
  ServiceDate DATE,
  ServiceType VARCHAR(255),
  ServiceDescription VARCHAR(255),
  ServiceNotes VARCHAR(255),
  FOREIGN KEY (EquipmentSerialNumber) REFERENCES Equipment(SerialNumber),
  INDEX idx_EquipmentSerialNumber (EquipmentSerialNumber),
  INDEX idx_ServiceDate (ServiceDate) -- Index for optimization
  -- Constraints
  CONSTRAINT ck_ServiceDate CHECK (ServiceDate <= CURDATE())
);

-- Create Shipping table
CREATE TABLE IF NOT EXISTS Shipping (
  ShippingID INT PRIMARY KEY AUTO_INCREMENT,
  EquipmentSerialNumber INT,
  ShippingDate DATE,
  ShippingFrom INT,
  ShippingMethod VARCHAR(255),
  TrackingNumber VARCHAR(255),
  ShippingStatus VARCHAR(255),
  FOREIGN KEY (EquipmentSerialNumber) REFERENCES Equipment(SerialNumber),
  FOREIGN KEY (ShippingFrom) REFERENCES Location(ID),
  INDEX idx_EquipmentSerialNumber (EquipmentSerialNumber),
  INDEX idx_ShippingDate (ShippingDate), -- Index for optimization
  INDEX idx_ShippingStatus (ShippingStatus) -- Index for optimization
  -- Constraints
  CONSTRAINT ck_ShippingDate CHECK (ShippingDate <= CURDATE())
);

-- Create Views
CREATE VIEW EquipmentView AS
SELECT SerialNumber, LastServiceDate, LastServiceDone, NextPNMDate, NeedsParts,
       PartName, PartsArrived, LocationID
FROM Equipment;

CREATE VIEW LocationView AS
SELECT ID, Name, Address, PhoneNumber
FROM Location;

CREATE VIEW ServiceHistoryView AS
SELECT ServiceID, EquipmentSerialNumber, ServiceDate, ServiceType, ServiceDescription, ServiceNotes
FROM ServiceHistory;

CREATE VIEW ShippingView AS
SELECT ShippingID, EquipmentSerialNumber, ShippingDate, ShippingFrom, ShippingMethod, TrackingNumber, ShippingStatus
FROM Shipping;

CREATE VIEW AdminUsersView AS
SELECT UserID, Username, Email
FROM Users
WHERE Username = 'admin';

-- Insert admin user record
INSERT IGNORE INTO Users (UserID, Username, Password, Email)
VALUES (1, 'admin', 'admin_password', 'admin@example.com');

-- Create InsertEquipment stored procedure
DELIMITER $$
CREATE PROCEDURE InsertEquipment(
  IN p_SerialNumber INT,
  IN p_LastServiceDate DATE,
  IN p_LastServiceDone VARCHAR(255),
  IN p_NextPNMDate DATE,
  IN p_NeedsParts ENUM('true', 'false', 'part ordered'),
  IN p_PartName VARCHAR(255),
  IN p_PartsArrived ENUM('true', 'false', 'N/A'),
  IN p_LocationID INT
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    -- Log error
    INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
    VALUES (CONCAT('Error in InsertEquipment: ', SQLERRM()), 'InsertEquipment');
    -- Handle exception (e.g., rollback transaction, display error message)
    -- ...
  END;

  INSERT INTO Equipment (SerialNumber, LastServiceDate, LastServiceDone, NextPNMDate, NeedsParts, PartName, PartsArrived, LocationID)
  VALUES (p_SerialNumber, p_LastServiceDate, p_LastServiceDone, p_NextPNMDate, p_NeedsParts, p_PartName, p_PartsArrived, p_LocationID);
  
  -- Log successful operation
  INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
  VALUES ('InsertEquipment operation successful', 'InsertEquipment');
END $$
DELIMITER ;

-- Create InsertLocation stored procedure
DELIMITER $$
CREATE PROCEDURE InsertLocation(
  IN p_Name VARCHAR(255),
  IN p_Address VARCHAR(255),
  IN p_PhoneNumber VARCHAR(20)
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    -- Log error
    INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
    VALUES (CONCAT('Error in InsertLocation: ', SQLERRM()), 'InsertLocation');
    -- Handle exception (e.g., rollback transaction, display error message)
    -- ...
  END;

  INSERT INTO Location (Name, Address, PhoneNumber)
  VALUES (p_Name, p_Address, p_PhoneNumber);
  
  -- Log successful operation
  INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
  VALUES ('InsertLocation operation successful', 'InsertLocation');
END $$
DELIMITER ;

-- Create InsertServiceHistory stored procedure
DELIMITER $$
CREATE PROCEDURE InsertServiceHistory(
  IN p_EquipmentSerialNumber INT,
  IN p_ServiceDate DATE,
  IN p_ServiceType VARCHAR(255),
  IN p_ServiceDescription VARCHAR(255),
  IN p_ServiceNotes VARCHAR(255)
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    -- Log error
    INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
    VALUES (CONCAT('Error in InsertServiceHistory: ', SQLERRM()), 'InsertServiceHistory');
    -- Handle exception (e.g., rollback transaction, display error message)
    -- ...
  END;

  INSERT INTO ServiceHistory (EquipmentSerialNumber, ServiceDate, ServiceType, ServiceDescription, ServiceNotes)
  VALUES (p_EquipmentSerialNumber, p_ServiceDate, p_ServiceType, p_ServiceDescription, p_ServiceNotes);
  
  -- Log successful operation
  INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
  VALUES ('InsertServiceHistory operation successful', 'InsertServiceHistory');
END $$
DELIMITER ;

-- Create InsertShipping stored procedure
DELIMITER $$
CREATE PROCEDURE InsertShipping(
  IN p_EquipmentSerialNumber INT,
  IN p_ShippingDate DATE,
  IN p_ShippingFrom INT,
  IN p_ShippingMethod VARCHAR(255),
  IN p_TrackingNumber VARCHAR(255),
  IN p_ShippingStatus VARCHAR(255)
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    -- Log error
    INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
    VALUES (CONCAT('Error in InsertShipping: ', SQLERRM()), 'InsertShipping');
    -- Handle exception (e.g., rollback transaction, display error message)
    -- ...
  END;

  INSERT INTO Shipping (EquipmentSerialNumber, ShippingDate, ShippingFrom, ShippingMethod, TrackingNumber, ShippingStatus)
  VALUES (p_EquipmentSerialNumber, p_ShippingDate, p_ShippingFrom, p_ShippingMethod, p_TrackingNumber, p_ShippingStatus);
  
  -- Log successful operation
  INSERT INTO ErrorLog (ErrorMessage, ProcedureName)
  VALUES ('InsertShipping operation successful', 'InsertShipping');
END $$
DELIMITER ;

-- Create AutoUpdateShippingStatus function
DELIMITER $$
CREATE FUNCTION AutoUpdateShippingStatus()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
BEGIN
  UPDATE Equipment
  SET PartsArrived = NEW.ShippingStatus
  WHERE SerialNumber = NEW.EquipmentSerialNumber;
  
  RETURN NEW;
END;
$$
DELIMITER ;

-- Create trigger to update Equipment when ShippingStatus changes
CREATE TRIGGER UpdateEquipmentStatus
AFTER UPDATE ON Shipping
FOR EACH ROW
WHEN (NEW.ShippingStatus != OLD.ShippingStatus)
EXECUTE FUNCTION AutoUpdateShippingStatus();
